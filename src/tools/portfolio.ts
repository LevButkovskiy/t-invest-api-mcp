import { Helpers, TinkoffInvestApi } from 'tinkoff-invest-api';
import {
  GetPortfolioParams,
  GetPortfolioParamsSchema,
} from '../schemas/portfolio';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const formatMoney = (money: any): string => {
  if (!money) return '0 ‚ÇΩ';
  return Helpers.toMoneyString(money);
};

const formatNumber = (quotation: any): string => {
  if (!quotation) return '0';
  const number = Helpers.toNumber(quotation);
  return number ? number.toString() : '0';
};

const formatPercentage = (quotation: any): string => {
  if (!quotation) return '0%';
  const value = Helpers.toNumber(quotation);
  return value ? `${value.toFixed(2)}%` : '0%';
};

const formatPosition = (position: any): string => {
  const ticker = position.ticker || 'N/A';
  const instrumentType = position.instrumentType || 'N/A';
  const instrumentUid = position.instrumentUid || 'N/A';
  const quantity = formatNumber(position.quantity);
  const currentPrice = formatMoney(position.currentPrice);
  const averagePrice = formatMoney(position.averagePositionPrice);
  const expectedYield = formatMoney(position.expectedYield);
  const dailyYield = formatMoney(position.dailyYield);
  const blocked = position.blocked ? ' (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)' : '';

  return `‚Ä¢ ${ticker} (${instrumentType})${blocked}
  instrumentUid: ${instrumentUid}
  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity} –ª–æ—Ç–æ–≤
  –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice}
  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${averagePrice}
  –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${expectedYield}
  –î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${dailyYield}`;
};

const formatVirtualPosition = (position: any): string => {
  const ticker = position.ticker || 'N/A';
  const instrumentType = position.instrumentType || 'N/A';
  const instrumentUid = position.instrumentUid || 'N/A';
  const quantity = formatNumber(position.quantity);
  const currentPrice = formatMoney(position.currentPrice);
  const averagePrice = formatMoney(position.averagePositionPrice);
  const expectedYield = formatMoney(position.expectedYield);
  const expireDate = position.expireDate
    ? new Date(position.expireDate).toLocaleDateString('ru-RU')
    : 'N/A';

  return `‚Ä¢ ${ticker} (${instrumentType}) - –∏—Å—Ç–µ–∫–∞–µ—Ç ${expireDate}
  instrumentUid: ${instrumentUid}
  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity} –ª–æ—Ç–æ–≤
  –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice}
  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${averagePrice}
  –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${expectedYield}`;
};

export const getPortfolioTool = {
  name: 'operations_getPortfolio',
  description:
    '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –ø–æ —Å—á–µ—Ç—É: –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏. –ö–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç instrumentUid –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: instruments_shares (–∞–∫—Ü–∏–∏), instruments_bonds (–æ–±–ª–∏–≥–∞—Ü–∏–∏), instruments_etfs (ETF), instruments_currencies (–≤–∞–ª—é—Ç—ã), instruments_futures (—Ñ—å—é—á–µ—Ä—Å—ã), instruments_options (–æ–ø—Ü–∏–æ–Ω—ã). –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: instruments_shareBy, instruments_bondBy, instruments_etfBy, instruments_currencyBy, instruments_futureBy, instruments_optionBy —Å instrumentUid –∏–∑ –ø–æ–∑–∏—Ü–∏–π.',
  parameters: GetPortfolioParamsSchema,
  execute: async (args: unknown, context: any) => {
    const params = args as GetPortfolioParams;
    try {
      const api = new TinkoffInvestApi({ token: context.session.token });
      const portfolio = await api.operations.getPortfolio({
        accountId: params.accountId,
      });

      // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
      const totalPortfolio = formatMoney(portfolio.totalAmountPortfolio);
      const totalShares = formatMoney(portfolio.totalAmountShares);
      const totalBonds = formatMoney(portfolio.totalAmountBonds);
      const totalEtf = formatMoney(portfolio.totalAmountEtf);
      const totalCurrencies = formatMoney(portfolio.totalAmountCurrencies);
      const totalFutures = formatMoney(portfolio.totalAmountFutures);
      const totalOptions = formatMoney(portfolio.totalAmountOptions);
      const totalSp = formatMoney(portfolio.totalAmountSp);

      // –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
      const expectedYield = formatMoney(portfolio.expectedYield);
      const expectedYieldRelative = formatPercentage(
        (portfolio as any).expectedYieldRelative,
      );
      const dailyYield = formatMoney(portfolio.dailyYield);
      const dailyYieldRelative = formatPercentage(
        (portfolio as any).dailyYieldRelative,
      );

      // –ü–æ–∑–∏—Ü–∏–∏
      const positionsText =
        portfolio.positions.length > 0
          ? portfolio.positions.map(formatPosition).join('\n\n')
          : '–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π';

      // –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
      const virtualPositionsText =
        portfolio.virtualPositions && portfolio.virtualPositions.length > 0
          ? portfolio.virtualPositions.map(formatVirtualPosition).join('\n\n')
          : '–ù–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π';

      return `üìä –ü–û–†–¢–§–ï–õ–¨ (–°—á–µ—Ç: ${portfolio.accountId})

üí∞ –û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${totalPortfolio}
‚Ä¢ –ê–∫—Ü–∏–∏: ${totalShares}
‚Ä¢ –û–±–ª–∏–≥–∞—Ü–∏–∏: ${totalBonds}
‚Ä¢ ETF: ${totalEtf}
‚Ä¢ –í–∞–ª—é—Ç—ã: ${totalCurrencies}
‚Ä¢ –§—å—é—á–µ—Ä—Å—ã: ${totalFutures}
‚Ä¢ –û–ø—Ü–∏–æ–Ω—ã: ${totalOptions}
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: ${totalSp}

üìà –î–û–•–û–î–ù–û–°–¢–¨
–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${expectedYield} (${expectedYieldRelative})
–î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${dailyYield} (${dailyYieldRelative})

üìã –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò
${positionsText}

üéØ –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –ü–û–ó–ò–¶–ò–ò
${virtualPositionsText}`;
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${errorMessage}`);
    }
  },
};
